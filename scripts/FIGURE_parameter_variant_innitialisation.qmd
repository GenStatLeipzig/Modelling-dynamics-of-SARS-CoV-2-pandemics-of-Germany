---
title: "FIGURE_and_SUPPLEMENT_parameter_severity"
format:
  html:
    df-print: kable
    fig-width: 10
    fig-height: 7
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: false
    standalone: true
    embed-resources: true
editor: source
execute:
  cache: false
editor_options:
  chunk_output_type: console
---

## INITITATE

```{r message = FALSE, warning = FALSE, "hide"}
rm(list  = ls())

require(toolboxH)
require(ggplot2)
require(ggthemes)
require(scales)
require(lubridate)
require(here)
require(plotly)
require(patchwork)
require(paletteer) #https://pmassicotte.github.io/paletteer_gallery/#Diverging
initializeSkript()

source(here("scripts/functions_model_240112.R"))

knitr::opts_chunk$set(message = FALSE, warning = FALSE, results = "hide")

col_vector =  c("#CB769E", "#DE639A", "#A85C85", "#0081AF", "#4F6D7A", "#7C6A0A", "#368F8B", "#246A73", "#5CC1BC", "#62C370", "#F7C548", "#F97E44", "#FB3640", "#B7245C", "#0D3B66", "#3E2F5B", "#B2675E", "#644536") # Nogpalette 
```

## LOAD Data
```{r}
parameter_explanation = read_excel2(here("data/FIGURE_and_SUPPLEMENT_parameter/parameter_explanation_240106.xlsx"))
parameter_explanation


federal_countryinfo = fread(here("data/FIGURE_and_SUPPLEMENT_general/federal_countries.csv"))


fixed_general_parameter  = read_excel2(here("data/FIGURE_and_SUPPLEMENT_parameter/fixed_general_parameter.xlsx"))


indiv_age_independentparams_pre  = read_excel2(here("data/FIGURE_and_SUPPLEMENT_parameter/indiv_age_independentparams.xlsx"))


parameters_together_pre = load_obj(here("data/FIGURE_and_SUPPLEMENT_parameter/parameters_together.RData"))
```

## Extract paramters
```{r}


timeinvariant_parameter = extract_timeinvariant_parameter(parameters_together_pre, indiv_age_independentparams_pre, fixed_general_parameter,federal_countryinfo,parameter_explanation)

timeinvariant_parameter[, is_Germany := grepl("Germany", region)]
timeinvariant_parameter[, parameter3 := paste0(parameter, ": ", parameter2)]

```


## Age specific - Death
### data wrangling

```{r}

plotdat_death = timeinvariant_parameter[grepl("death", parameter2)]
helper = dcast.data.table(plotdat_death[parameter %in% c("r8"), .(region, parameter, value)] %>% unique, region  ~ parameter ,  value.var = "value")
plotdat_death[, general_rate := helper[match_hk(plotdat_death$region, helper$region), r8]]
helper2 = plotdat_death[parameter =="pdeath_alpha"] %>% unique()# wildtype rate, used as factor for mutations
helper2[, id:= paste(region, agegroup)]

plotdat_death[, wildtype_rate := helper2[match_hk(paste(plotdat_death$region, plotdat_death$agegroup), helper2$id), value]]

plotdat_death2 = plotdat_death[parameter != "r8"]
plotdat_death2[, value2 := value * general_rate*wildtype_rate]

plotdat_death2[, variant:= str_split(parameter2, " ") %>% sapply(., last)]
plotdat_death2[, variant:=factor(variant, levels = unique(variant))]
plotdat_death2[,.N, variant]


```
### plot
```{r fig.width=18, fig.height=12}


p_death = ggplot(plotdat_death2, aes(agegroup, value2, ymin = value2, ymax = value2, col = region, fill = region, linewidth = is_Germany, alpha = is_Germany)) + 
  geom_crossbar()  + 
  labs(col = "", fill = "")+
  facet_grid(variant~.)+
  coord_flip() +
  theme_minimal(base_size = 12)+
  theme(legend.position = "top", 
        strip.text.y = element_text(angle = 0)
  ) + 
  # scale_colour_manual(values = c(alpha(colour = "darkred", 0.5), alpha(colour = "steelblue4", 0.5)))+
  # scale_fill_manual(values = c(alpha(colour = "darkred", 0.5), alpha(colour = "steelblue4", 0.5)))+
  xlab("") +
  scale_fill_manual(values = col_vector)+
  scale_color_manual(values = col_vector)+
  ylab("effective rate") +
  scale_y_log10(breaks = log_breaks(8))+
  
  ggtitle("Rates compartment I2 (infected) -> D (dead) for immunologically naive patients") + scale_linewidth_manual(values = c(0.5, 2)) +
  scale_alpha_manual(values = c(0.2, 1)) +
  guides(linewidth = "none", alpha = "none")
ggplotly(p_death)


```

### save plot
```{r}

pdf(here("results/FIGURE_parameter_deathrate.pdf"), 11,7)
p_death  
dev.off()

```


## Age specific - ICU
### data wrangling

```{r}

plotdat_icu = timeinvariant_parameter[grepl("ICU", parameter2) & (grepl("transit time", parameter2)==F)]
unique(plotdat_icu$parameter3)
helper = dcast.data.table(plotdat_icu[parameter %in% c("r6"), .(region, parameter, value)] %>% unique, region  ~ parameter ,  value.var = "value")
plotdat_icu[, general_rate := helper[match_hk(plotdat_icu$region, helper$region), r6]]
helper2 = plotdat_icu[parameter =="pcrit_alpha"] %>% unique()# wildtype rate, used as factor for mutations
helper2[, id:= paste(region, agegroup)]

plotdat_icu[, wildtype_rate := helper2[match_hk(paste(plotdat_icu$region, plotdat_icu$agegroup), helper2$id), value]]

plotdat_icu2 = plotdat_icu[parameter != "r6"]
plotdat_icu2[, value2 := value * general_rate*wildtype_rate]

plotdat_icu2[, variant:= str_split(parameter2, " ") %>% sapply(., last)]
plotdat_icu2[, variant:=factor(variant, levels = unique(variant))]
plotdat_icu2[,.N, variant]


```
### plot
```{r fig.width=18, fig.height=12}


p_icu = ggplot(plotdat_critical2, aes(agegroup, value2, ymin = value2, ymax = value2, col = region, fill = region, linewidth = is_Germany, alpha = is_Germany)) + 
  geom_crossbar()  + 
  labs(col = "", fill = "")+
  facet_grid(variant~.)+
  coord_flip() +
  theme_minimal(base_size = 12)+
  theme(legend.position = "top", 
        strip.text.y = element_text(angle = 0)
  ) + 
  # scale_colour_manual(values = c(alpha(colour = "darkred", 0.5), alpha(colour = "steelblue4", 0.5)))+
  # scale_fill_manual(values = c(alpha(colour = "darkred", 0.5), alpha(colour = "steelblue4", 0.5)))+
  xlab("") +
  scale_fill_manual(values = col_vector)+
  scale_color_manual(values = col_vector)+
  ylab("effective rate") +
  scale_y_log10(breaks = log_breaks(8))+
  
  ggtitle("Rates compartment I2 (infected) -> C (ICU) for immunologically naive patients") + scale_linewidth_manual(values = c(0.5, 2)) +
  scale_alpha_manual(values = c(0.2, 1)) +
  guides(linewidth = "none", alpha = "none")
ggplotly(p_icu)


```

### save plot
```{r}

pdf(here("results/FIGURE_parameter_icurate.pdf"), 11,7)
p_icu
dev.off()

```








## Age specific - Hospital
### data wrangling

```{r}

plotdat_hospital = timeinvariant_parameter[grepl("hospital", parameter2) & (grepl("transit time", parameter2)==F)]
unique(plotdat_hospital$parameter3)
helper = dcast.data.table(plotdat_hospital[parameter %in% c("r9"), .(region, parameter, value)] %>% unique, region  ~ parameter ,  value.var = "value")
plotdat_hospital[, general_rate := helper[match_hk(plotdat_hospital$region, helper$region), r9]]
helper2 = plotdat_hospital[parameter =="pnorm_alpha"] %>% unique()# wildtype rate, used as factor for mutations
helper2[, id:= paste(region, agegroup)]

plotdat_hospital[, wildtype_rate := helper2[match_hk(paste(plotdat_hospital$region, plotdat_hospital$agegroup), helper2$id), value]]

plotdat_hospital2 = plotdat_hospital[parameter != "r9"]
plotdat_hospital2[, value2 := value * general_rate*wildtype_rate]

plotdat_hospital2[, variant:= str_split(parameter2, " ") %>% sapply(., last)]
plotdat_hospital2[, variant:=factor(variant, levels = unique(variant))]
plotdat_hospital2[,.N, variant]


```
### plot
```{r fig.width=18, fig.height=12}


p_hospital = ggplot(plotdat_hospital2, aes(agegroup, value2, ymin = value2, ymax = value2, col = region, fill = region, linewidth = is_Germany, alpha = is_Germany)) + 
  geom_crossbar()  + 
  labs(col = "", fill = "")+
  facet_grid(variant~.)+
  coord_flip() +
  theme_minimal(base_size = 12)+
  theme(legend.position = "top", 
        strip.text.y = element_text(angle = 0)
  ) + 
  # scale_colour_manual(values = c(alpha(colour = "darkred", 0.5), alpha(colour = "steelblue4", 0.5)))+
  # scale_fill_manual(values = c(alpha(colour = "darkred", 0.5), alpha(colour = "steelblue4", 0.5)))+
  xlab("") +
  scale_fill_manual(values = col_vector)+
  scale_color_manual(values = col_vector)+
  ylab("effective rate") +
  scale_y_log10(breaks = log_breaks(8))+
  
  ggtitle("Rates compartment I2 (infected) -> N (hospital) for immunologically naive patients") + scale_linewidth_manual(values = c(0.5, 2)) +
  scale_alpha_manual(values = c(0.2, 1)) +
  guides(linewidth = "none", alpha = "none")
ggplotly(p_hospital)


```

### save plot
```{r}

pdf(here("results/FIGURE_parameter_hospitalrate.pdf"), 11,7)
p_hospital
dev.off()

```







## now only with parmeters with variance separated by virus attributed
```{r}

unique(timeinvariant_parameter$parameter) %>% dput()

timeinvariant_parameter[, value_per100k := 100000*value/ew2021]
timeinvariant_parameter[, value2 := ifelse(grepl("influx", parameter), value_per100k, value)]

timeinvariant_parameter[, parameter2b := ifelse(grepl("Initial number of wildtype", parameter2),"Initial influx wildtype / 100k", parameter2 %>% as.character())]

setorder(timeinvariant_parameter, parameter2)
timeinvariant_parameter[, parameter2b := factor(parameter2b, levels = unique(parameter2b))]
p_timeindep2 = ggplot(timeinvariant_parameter[parameter %nin%c( "r3", "r3_Omicron_BA2_BA5", 
                                                          "r5", "r6", "r7", "r8",  "rallele_engl", "rallele_delta", "rallele_omicron", "rallele_BA2", "rallele_BA5", "rinflux2", "rinflux3", "rinflux4", "initallele_engl", "initallele_delta", 
                                                          "initallele_omicron", "initallele_BA2", "initallele_BA5", "initallele_BAX", 
                                                          "initallele_BAY",
                                                          "dateallele_engl", "dateallele_delta", "dateallele_omicron", 
                                                          "dateallele_BA2", "dateallele_BA5")], aes(parameter2b, value2, ymin = value2, ymax = value2, col = region, fill = region)) + geom_crossbar()  + 
  labs(col = "", fill = "")+
  theme_minimal(base_size = 12)+
  theme(legend.position = "top") + 
  # scale_colour_manual(values = c(alpha(colour = "darkred", 0.5), alpha(colour = "steelblue4", 0.5)))+
  # scale_fill_manual(values = c(alpha(colour = "darkred", 0.5), alpha(colour = "steelblue4", 0.5)))+
  xlab("") +
  ylab("parameter value") +
  scale_fill_manual(values = col_vector)+
  scale_color_manual(values = col_vector)+
  coord_flip()+
  ggtitle("A) general region dependent parameter") +
  scale_y_log10(breaks = log_breaks(8)) +
  # scale_linewidth_manual(values = c(0.5, 2)) +
  # scale_alpha_manual(values = c(0.2, 1)) +
  guides(linewidth = "none", alpha = "none")

p_timeindep2
```

## dates separately
```{r}
firstdate = as_date("2020-03-04")
# timeinvariant_parameter[grepl("date", parameter), datum := firstdate-1 + value]

timeinvariant_parameter

timeinvariant_parameter[, vartype := str_split(parameter, "_") %>% sapply(., "[", 1)] 
timeinvariant_parameter[, allele := str_split(parameter, "_") %>% sapply(., "[", 2)] 
timeinvariant_parameterb = dcast.data.table(timeinvariant_parameter[is.na(allele)==F], region +ew2021+ allele ~ vartype, value.var = c('value'))
timeinvariant_parameterb = timeinvariant_parameterb[is.na(dateallele)==F, -"r3"]
timeinvariant_parameterb[, datum := firstdate-1 + dateallele]

timeinvariant_parameterb[, variant2 := ifelse(allele =="engl", "alpha",
                                        ifelse(allele == "omicron", "BA1", allele))]


library(RColorBrewer)
n <- uniqueN(timeinvariant_parameterb$region)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
# col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))) 



pie(rep(1,n), col=sample(col_vector, n))

# col_vector =palette(rainbow(n))[1:n] 


timeinvariant_parameterb[, initallelePer100k := 100000*initallele/ew2021]
unique(timeinvariant_parameterb$variant2) %>% dput()
timeinvariant_parameterb[, variant3 := factor(variant2, levels = c("alpha", "delta", "BA1","BA2", "BA5"))]
p_timeindep3 = ggplot(timeinvariant_parameterb, aes(datum, initallelePer100k,col = region, fill = region)) + geom_col( position = position_dodge2(width = 0.9, preserve = "single"))  + 
  facet_wrap(~variant3, scales = "free", ncol = 3) +
  labs(col = "", fill = "")+
  theme_minimal(base_size = 12)+
  theme(legend.position = "top", 
        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) + 
  scale_x_date(breaks = date_breaks(width = "1 week"), labels = label_date(format = "%Y-%b-%d"))+
  # scale_y_log10(breaks = log_breaks(8)) +
  scale_y_continuous(breaks = pretty_breaks(8)) +
  xlab("") +
  ylab("initial influx per 100 000 inhabitants") +
  # coord_flip()+
  scale_fill_manual(values = col_vector)+
  scale_color_manual(values = col_vector)+
  guides(fill=guide_legend(ncol=2),
         color=guide_legend(ncol=2))+
  # scale_color_manual(values = rep(alpha("black", 0.3), n))+
  ggtitle("B) Date dependent Influx of variants") 
# scale_y_log10(breaks = log_breaks(8))
# scale_linewidth_manual(values = c(0.5, 2)) +
# scale_alpha_manual(values = c(0.2, 1)) +
# guides(linewidth = "none", alpha = "none")

(p_timeindep2 + guides(col = "none", fill="none")) /p_timeindep3 + plot_layout(guides = "collect", heights = c(1,3)) & theme(legend.position = "right")


```
save pig
```{r}
jpeg2(here("results/s18_2_regional_dependent_params.jpeg"), 11,11)
(p_timeindep2 + guides(col = "none", fill="none")) /p_timeindep3 + plot_layout(guides = "collect", heights = c(1,3))  + plot_annotation(caption = "s18_2_regional_dependent_params.jpeg") & theme(legend.position = "right")
dev.off()

pdf(here("results/s18_2_regional_dependent_params.pdf"), 11,11)
(p_timeindep2 + guides(col = "none", fill="none")) /p_timeindep3 + plot_layout(guides = "collect", heights = c(1,3))  + plot_annotation(caption = "s18_2_regional_dependent_params.pdf") & theme(legend.position = "right")
dev.off()

```

## Contact matrices
```{r}
# unique(age_indep_params$parameter)
# age_indep_params_mat = age_indep_params[grepl("mat", parameter)]
# age_indep_params_mat[region ==region[1]] %>% ccc()
# 
# dput(unique(age_indep_params_mat$parameter))
# renamer_mat = data.table(age = c(unique(timeinvariant_parameter$agegroup), "Between\nagegroups"),
#                          matname = c("mat_contact11",  "mat_contact22", "mat_contact33", 
# "mat_contact44", "mat_contact55","mat_contact12"))
# age_indep_params_mat[, agegroup_diag := renamer_mat[match_hk(age_indep_params_mat$parameter, renamer_mat$matname), age]]
# 
# abk_bl = read_excel2(here("visualisierung/data/abkuerz_bl.xlsx"))
# age_indep_params_mat[, BL := abk_bl[match_hk(age_indep_params_mat$region, abk_bl$name2), abbr]]
# require(ggrepel)
# p_contact =ggplot(age_indep_params_mat, aes(agegroup_diag,value, label = BL, col = region )) +
#    theme_minimal(base_size = 14) + ylab("Contact Matrix elements") +
#   geom_text_repel(nudge_y = 0, size = 3, show.legend = F,max.overlaps = 20) + geom_point() +
#   guides(color = "none") +
#   labs(color = "")+
#   theme(legend.position = "top")+
#   xlab("Diagonal and off-diagonal estimates") +
#   scale_y_continuous(breaks = pretty_breaks(10))
# p_contact

```

## plot
```{r}
# jpeg2(here("results/s18_2_contactmatrix_vals.jpeg"), 8,6)
# p_contact
# dev.off()

```

## Time dependent r1
### LOAD

b1 zeitverlauf daten

```{r}
b1_verlauf_pre =  load_obj(here("data/FIGURE_and_SUPPLEMENT_general/TreatmentTensorTogether.RData"))

dimnames(b1_verlauf_pre) 

b1_verlauf =b1_verlauf_pre %>% as.data.table(keep.rownames = T)
setnames(b1_verlauf, c("time", "agegroup", "region", "value"))

firstdate = as_date("2020-03-04")

b1_verlauf[, time := as.numeric(time)]                  
b1_verlauf=b1_verlauf[order(time)]
b1_verlauf[, datum := firstdate-1 + time]

b1_verlauf$agegroup %>% unique()

agerename0 = data.table(old = b1_verlauf$agegroup %>% unique(),
                        new = c("A00-A14", "A15-A34", "A35-A59", "A60-A79", "A80+")
)

b1_verlauf[, agegroup2 := agerename0[match_hk(b1_verlauf$agegroup, agerename0$old),new]]


b1_verlauf[, .N, .(agegroup, agegroup2)] 


b1_verlauf$region %>% unique()
b1_verlauf[, is_Germany := grepl("Germany", region)]

```


```{r fig.width=14, fig.height=14}
## dates
# DatesParameters = read_excel2(here("visualisierung/data/230122_optimagent_treffen/2023-01-20_Parameters_DE_SN_hk.xlsx"), "DatesParameters")
# 
# DatesParameters[, treatnum := str_replace(ID, "date_", "")]
# 
# 
# param_timedep_de = param_agedep_de[grep("treat", age)]
# param_timedep_sn = param_agedep_sn[grep("treat", age)]
# 
# qlist1 = venn2(param_timedep_de$age, DatesParameters$treatnum)
# param_timedep_de[, datum := DatesParameters[match_hk(param_timedep_de$age, DatesParameters$treatnum), Germany]]
# 
# param_timedep_sn[, datum := DatesParameters[match_hk(param_timedep_sn$age, DatesParameters$treatnum), Saxony]]
# 
# param_timedep = rbind(param_timedep_sn, param_timedep_de)
# 
# 
# param_timedepm = melt(param_timedep, id.vars = c("region", "datum"), measure.vars = c( "0_14", "15_34", "35_59", "60_79", "80"), variable.name = "agegroup")
# 
# param_timedepm



p_timedep = ggplot(b1_verlauf , aes(datum, value, col = region, fill = region)) + geom_line()  + 
  labs(col = "", fill = "")+
  facet_grid(agegroup2~.)+ #, space = "free", scales = "free")+
  theme_minimal(base_size = 14)+
  theme(legend.position = "top", 
        strip.text.y = element_text(angle = 0)
  ) + 
  # scale_colour_manual(values = c(alpha(colour = "darkred", 0.5), alpha(colour = "steelblue4", 0.5)))+
  # scale_fill_manual(values = c(alpha(colour = "darkred", 0.5), alpha(colour = "steelblue4", 0.5)))+
  xlab("") +
  
  ylab("residual infectivity") +
  
  
  ggtitle("B)")+
  # scale_linewidth_manual(values = c(0.5, 1)) +
  # scale_alpha_manual(values = c(0.5, 1)) +
  
  scale_color_manual(values = col_vector)+
  guides(linewidth = "none", alpha = "none") 
```


```{r fig.width=14, fig.height=14,results ='markup'}
p_timedep %>% ggplotly()
```

## compare with heterogeneity
```{r}

# epidataBL = fread(here("../data/FIGURE_and_SUPPLEMENT_general/s1030_2_datint_ecdc_DE_BL_2023-03-06_v5_agestrat.txt"), dec = ",")#[CountryExp=="Deutschland"]
epidataBL = fread(here("data/FIGURE_and_SUPPLEMENT_general/s1030_2_datint_ecdc_DE_BL_2023-03-26_v5_agestrat.txt"), dec = ",")#[CountryExp=="Deutschland"]

epidataBL[, .N, CountryExp]
epidataBL[, region := ifelse(CountryExp=="Deutschland", "Germany_RKI", CountryExp)]
venn2(epidataBL$CountryExp, timeinvariant_parameter$region)
epidataBL[, NewConfCases7_100k7 := 7*NewConfCases7/Ntotal*100000]
epidataBL[, AllDeaths_100k := AllDeaths/Ntotal*100000]

epidataBL[, is_Germany := grepl("Deutschland", CountryExp)]
epidataBL[, Altersgruppe2 := ifelse(Altersgruppe=="all", "all age groups", Altersgruppe)]
p_epi = ggplot(epidataBL[Altersgruppe =="all" & DateRep<= max(b1_verlauf$datum)],aes(DateRep, ifelse(NewConfCases7_100k7<1, 1, NewConfCases7_100k7), color = region) ) + 
  ylab("Incidence testpositives per 100k*7d")+
  geom_line() +
  xlab("")+
  labs(color = "")+
  facet_wrap(~Altersgruppe2  ,scales = "free") +  scale_y_log10(breaks = log_breaks(10),label= label_comma(accuracy = 1) ) + 
  theme_minimal(base_size = 14) +
  ggtitle("A)")+
  # scale_linewidth_manual(values = c(0.7,2))+
  
  scale_color_manual(values = col_vector)+
  plot_layout(guides = "collect")  & theme(legend.position = "top")

p_epi
```


```{r}
jpeg2(here("results/s18_2_b1_infectivity_vs_time_vs_testpositives.jpeg"), 10,8)
(p_epi + coord_cartesian(xlim = c(min(b1_verlauf$datum), max(b1_verlauf$datum))) 
  
) / p_timedep + guides(color = "none")+
  coord_cartesian(ylim = c(0, 1.7), 
                  xlim = c(min(b1_verlauf$datum), max(b1_verlauf$datum))) + plot_layout(guides = "collect", heights = c(1,2)) +   plot_annotation(caption = "s18_2_b1_infectivity_vs_time_vs_testpositives.jpeg")
dev.off()


jpeg2(here("results/s18_2_b1_infectivity_vs_time_unscaled.jpeg"), 8,6)
p_timedep 
dev.off()


```

